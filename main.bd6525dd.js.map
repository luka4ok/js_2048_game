{"version":3,"sources":["scripts/main.js"],"names":["INITIAL_RANDOM_NUMBERS","WIN_VALUE","keyDownEvent","directions","up","down","right","left","ALL_DIRECTION","Object","values","VERTICAL_DIRECTION","NORMAL_SORT_DIRECTION","page","document","documentElement","button","querySelector","messageStart","messageWin","messageLose","gameField","gameScore","gameFieldArray","fieldSize","length","score","turn","direction","key","includes","movement","flipArray","checkIfWin","flat","showMessage","removeEventListener","checkIfLoose","renderToUI","el","classList","remove","arr","rowIndex","cellIndex","content","rows","cells","textContent","className","renderScore","sumEqualAndIncreaseScore","i","setScore","value","some","every","movesAvaliable","row","_","moveToDirection","sortedArray","sort","a","reverse","getNewRandomCoords","emptyCellsArr","reduce","acc","forEach","cell","j","push","getRandomDigit","coords","getRandomlyTwoOrFour","scoreValue","getInitialNumbers","count","initialNumbersArr","Math","random","getRandomStartCoords","max","elements","randomCoords","coord","col","turnedArray","Array","from","map","floor","resetGame","addEventListener","contains","add","arrOfStartCoords","initialNumbers"],"mappings":";AAAA,aAEA,IAAMA,EAAyB,EACzBC,EAAY,KAEZC,EAAe,UACfC,EAAa,CACjBC,GAAI,UACJC,KAAM,YACNC,MAAO,aACPC,KAAM,aAGFC,EAAgBC,OAAOC,OAAOP,GAC9BQ,EAAqB,CAACR,EAAWC,GAAID,EAAWE,MAChDO,EAAwB,CAACT,EAAWE,KAAMF,EAAWG,OAGrDO,EAAOC,SAASC,gBAChBC,EAASF,SAASG,cAAc,WAChCC,EAAeJ,SAASG,cAAc,kBACtCE,EAAaL,SAASG,cAAc,gBACpCG,EAAcN,SAASG,cAAc,iBACrCI,EAAYP,SAASG,cAAc,eACnCK,EAAYR,SAASG,cAAc,eAErCM,EAAiB,CACnB,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,KAAM,KAAM,EAAG,IAGZC,EAAYD,EAAeE,OAE7BC,EAAQ,EAgCZ,SAASC,EAAyB,GAAbC,IAAAA,EAALC,EAAAA,IACTrB,EAAcsB,SAASF,KAIxBjB,EAAmBmB,SAASF,IAE9BG,EADAR,EAAiBS,EAAUT,GACFK,GACzBL,EAAiBS,EAAUT,IAE3BQ,EAASR,EAAgBK,GAGvBK,EAAWV,EAAeW,UAC5BC,EAAYhB,GACZN,EAAKuB,oBAAoBlC,EAAcyB,IAGrCU,EAAad,KACfY,EAAYf,GACZP,EAAKuB,oBAAoBlC,EAAcyB,IAGzCW,EAAWf,IAGb,SAASY,EAAYI,GACnBA,EAAGC,UAAUC,OAAO,UAGtB,SAASH,EAAWI,GACb,IAAA,IAAMC,KAAYD,EAChB,IAAA,IAAME,KAAaF,EAAIC,GAAW,CAC/BE,IAAAA,EAAUH,EAAIC,GAAUC,IAAc,GAE5CvB,EAAUyB,KAAKH,GAAUI,MAAMH,GAAWI,YAAcH,EAExDxB,EAAUyB,KAAKH,GAAUI,MAAMH,GAAWK,UAAYJ,EACxBH,0BAAAA,OAAAA,EAAIC,GAAUC,IACxC,aAIRM,EAAYxB,GAGd,SAASyB,EAAyBT,GAC3B,IAAA,IAAIU,EAAI,EAAGA,EAAIV,EAAIjB,OAAQ2B,IAC1BV,EAAIU,KAAOV,EAAIU,EAAI,KACrBV,EAAIU,EAAI,IAAM,EAEdC,EADA3B,GAASgB,EAAIU,EAAI,IAEjBV,EAAIU,GAAK,EACTA,GAAK,GAIFV,OAAAA,EAGT,SAASW,EAASC,GAChB5B,EAAQ4B,EAGV,SAASrB,EAAWS,GACXA,OAAAA,EAAIa,KAAK,SAAChB,GAAOA,OAAAA,IAAOtC,IAGjC,SAASoC,EAAaK,GAChB,QAACA,EAAIR,OAAOsB,MAAM,SAACjB,GAAOA,OAAAA,OAIGkB,EAAef,KAEXe,EAAezB,EAAUU,KAGhE,SAASe,EAAef,GACfA,OAAAA,EAAIa,KAAK,SAACG,GAAQA,OAAAA,EAAIH,KAAK,SAACI,EAAGP,GAAMM,OAAAA,EAAIN,KAAOM,EAAIN,EAAI,OAGjE,SAASQ,EAAgBlB,EAAKd,GACxBiC,IAAAA,EAWGA,OATHjD,EAAsBkB,SAASF,GACjCiC,EAAcnB,EAAIoB,KAAK,SAACC,GAAO,OAACA,EAAS,GAAJ,IAC5B,CAAC5D,EAAWI,KAAMJ,EAAWC,IAAI0B,SAASF,KACnDiC,EAAcnB,EACXsB,UACAF,KAAK,SAACC,GAAO,OAACA,EAAS,GAAJ,IACnBC,WAGEH,EAGT,SAASI,EAAmBvB,GACpBwB,IAAAA,EAAgBxB,EAAIyB,OAAO,SAACC,EAAKV,EAAKN,GAOnCgB,OANPV,EAAIW,QAAQ,SAACC,EAAMC,GACJ,IAATD,GACFF,EAAII,KAAK,CAACpB,EAAGmB,MAIVH,GACN,IAIIF,OAAAA,EAFmBO,EAAeP,EAAczC,OAAS,IAKlE,SAASM,EAASW,EAAKd,GAChB,IAAA,IAAMwB,KAAKV,EAGdA,EAAIU,GAAKQ,EAAgBlB,EAAIU,GAAIxB,GAEjCc,EAAIU,GAAKD,EAAyBT,EAAIU,IAGtCV,EAAIU,GAAKQ,EAAgBlB,EAAIU,GAAIxB,GAK7B8C,IAAAA,EAAST,EAAmBvB,GAE9BgC,IAEFhC,EAAIgC,EAAO,IAAIA,EAAO,IAAMC,KAIhC,SAASzB,EAAY0B,GACnBtD,EAAU0B,YAAc4B,EAG1B,SAASC,EAAkBC,GAGlBC,IAFDA,IAAAA,EAAoB,GAEnBA,EAAkBtD,OAASqD,GAChCC,EAAkBP,KAAKG,KAGlBI,OAAAA,EAGT,SAASJ,IACAK,OAAAA,KAAKC,SAAW,GAAM,EAAI,EAGnC,SAASC,EAAqBC,EAAKC,GAG1BC,IAFDA,IAAAA,EAAe,GADsB,EAAA,WAInCC,IAAAA,EAAQ,CACZ5B,IAAKe,EAAeU,GACpBI,IAAKd,EAAeU,IAInBE,EAAa9B,KACZ,SAAA,GAAGG,IAAAA,EAAAA,EAAAA,IAAK6B,EAAAA,EAAAA,IAAU7B,OAAAA,IAAQ4B,EAAM5B,KAAO6B,IAAQD,EAAMC,OAGvDF,EAAab,KAAKc,IAXfD,EAAa5D,OAAS2D,GAAU,IAehCC,OAAAA,EAGT,SAASrD,EAAUU,GACX8C,IAAAA,EAAcC,MAAMC,KAAK,CAC7BjE,OAAQiB,EAAIjB,SACXkE,IAAI,WAAM,MAAA,KAER,IAAA,IAAMvC,KAAKV,EACT,IAAA,IAAM6B,KAAK7B,EAAIU,GAClBoC,EAAYpC,GAAGoB,KAAK9B,EAAI6B,GAAGnB,IAIxBoC,OAAAA,EAGT,SAASf,EAAeU,GAEfH,OAAAA,KAAKY,MAAMZ,KAAKC,SAAWE,GAGpC,SAASU,IACPxC,EAAS,GAET9B,EAAiB,CACf,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,IAGZV,EAAKiF,iBAAiB5F,EAAcyB,GAvOtCX,EAAO8E,iBAAiB,QAAS,WAC3B9E,EAAOwB,UAAUuD,SAAS,WAC5B/E,EAAOwB,UAAUC,OAAO,SACxBzB,EAAOwB,UAAUwD,IAAI,WACrBhF,EAAOgC,YAAc,UACrB9B,EAAasB,UAAUwD,IAAI,WAG7BH,IAEMI,IAAAA,EAAmBf,EACvB1D,EACAxB,GAEIkG,EAAiBrB,EAAkB7E,GAEzCiG,EAAiB5B,QAAQ,SAAejB,EAAAA,GAAZM,IAAAA,EAAAA,EAAAA,IAAK6B,EAAAA,EAAAA,IAC/BhE,EAAemC,GAAK6B,GAAOW,EAAe9C,KAG5Cd,EAAWf,KAIbV,EAAKiF,iBAAiB5F,EAAcyB","file":"main.bd6525dd.js","sourceRoot":"../src","sourcesContent":["'use strict';\n\nconst INITIAL_RANDOM_NUMBERS = 2;\nconst WIN_VALUE = 2048;\n\nconst keyDownEvent = 'keydown';\nconst directions = {\n  up: 'ArrowUp',\n  down: 'ArrowDown',\n  right: 'ArrowRight',\n  left: 'ArrowLeft',\n};\n\nconst ALL_DIRECTION = Object.values(directions);\nconst VERTICAL_DIRECTION = [directions.up, directions.down];\nconst NORMAL_SORT_DIRECTION = [directions.down, directions.right];\n\n// write your code here\nconst page = document.documentElement;\nconst button = document.querySelector('.button');\nconst messageStart = document.querySelector('.message-start');\nconst messageWin = document.querySelector('.message-win');\nconst messageLose = document.querySelector('.message-lose');\nconst gameField = document.querySelector('.game-field');\nconst gameScore = document.querySelector('.game-score');\n\nlet gameFieldArray = [\n  [1, 2, 4, 6],\n  [7, 8, 9, 3],\n  [6, 5, 2, 2],\n  [1024, 1024, 6, 7],\n];\n\nconst fieldSize = gameFieldArray.length;\n\nlet score = 0;\n\n// *** Game start ***\n\nbutton.addEventListener('click', () => {\n  if (button.classList.contains('start')) {\n    button.classList.remove('start');\n    button.classList.add('restart');\n    button.textContent = 'Restart';\n    messageStart.classList.add('hidden');\n  }\n\n  resetGame();\n\n  const arrOfStartCoords = getRandomStartCoords(\n    fieldSize,\n    INITIAL_RANDOM_NUMBERS\n  );\n  const initialNumbers = getInitialNumbers(INITIAL_RANDOM_NUMBERS);\n\n  arrOfStartCoords.forEach(({ row, col }, i) => {\n    gameFieldArray[row][col] = initialNumbers[i];\n  });\n\n  renderToUI(gameFieldArray);\n});\n\n// *** Arrows PRESS handler ***\npage.addEventListener(keyDownEvent, turn);\n\n// *** FUNCTIONS ***\n\nfunction turn({ key: direction }) {\n  if (!ALL_DIRECTION.includes(direction)) {\n    return;\n  }\n\n  if (VERTICAL_DIRECTION.includes(direction)) {\n    gameFieldArray = flipArray(gameFieldArray);\n    movement(gameFieldArray, direction);\n    gameFieldArray = flipArray(gameFieldArray);\n  } else {\n    movement(gameFieldArray, direction);\n  }\n\n  if (checkIfWin(gameFieldArray.flat())) {\n    showMessage(messageWin);\n    page.removeEventListener(keyDownEvent, turn);\n  }\n\n  if (checkIfLoose(gameFieldArray)) {\n    showMessage(messageLose);\n    page.removeEventListener(keyDownEvent, turn);\n  }\n\n  renderToUI(gameFieldArray);\n}\n\nfunction showMessage(el) {\n  el.classList.remove('hidden');\n}\n\nfunction renderToUI(arr) {\n  for (const rowIndex in arr) {\n    for (const cellIndex in arr[rowIndex]) {\n      const content = arr[rowIndex][cellIndex] || '';\n\n      gameField.rows[rowIndex].cells[cellIndex].textContent = content;\n\n      gameField.rows[rowIndex].cells[cellIndex].className = content\n        ? `field-cell field-cell--${arr[rowIndex][cellIndex]}`\n        : 'field-cell';\n    }\n  }\n\n  renderScore(score);\n}\n\nfunction sumEqualAndIncreaseScore(arr) {\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === arr[i + 1]) {\n      arr[i + 1] *= 2;\n      score += arr[i + 1];\n      setScore(score);\n      arr[i] = 0;\n      i += 1;\n    }\n  }\n\n  return arr;\n}\n\nfunction setScore(value) {\n  score = value;\n}\n\nfunction checkIfWin(arr) {\n  return arr.some((el) => el === WIN_VALUE);\n}\n\nfunction checkIfLoose(arr) {\n  if (!arr.flat().every((el) => el)) {\n    return false;\n  }\n\n  const hirizontalMovesAvaliable = movesAvaliable(arr);\n\n  return !hirizontalMovesAvaliable && !movesAvaliable(flipArray(arr));\n}\n\nfunction movesAvaliable(arr) {\n  return arr.some((row) => row.some((_, i) => row[i] === row[i + 1]));\n}\n\nfunction moveToDirection(arr, direction) {\n  let sortedArray;\n\n  if (NORMAL_SORT_DIRECTION.includes(direction)) {\n    sortedArray = arr.sort((a) => (!a ? -1 : 0));\n  } else if ([directions.left, directions.up].includes(direction)) {\n    sortedArray = arr\n      .reverse()\n      .sort((a) => (!a ? -1 : 0))\n      .reverse();\n  }\n\n  return sortedArray;\n}\n\nfunction getNewRandomCoords(arr) {\n  const emptyCellsArr = arr.reduce((acc, row, i) => {\n    row.forEach((cell, j) => {\n      if (cell === 0) {\n        acc.push([i, j]);\n      }\n    });\n\n    return acc;\n  }, []);\n\n  const randomCoordsIndex = getRandomDigit(emptyCellsArr.length - 1);\n\n  return emptyCellsArr[randomCoordsIndex];\n}\n\nfunction movement(arr, direction) {\n  for (const i in arr) {\n    // move to direction edge\n    // (needed in case whole row comtains similar values e.g. [2, 2, 2, 2])\n    arr[i] = moveToDirection(arr[i], direction);\n    // sum equal values\n    arr[i] = sumEqualAndIncreaseScore(arr[i]);\n\n    // move to direction edge again\n    arr[i] = moveToDirection(arr[i], direction);\n  }\n\n  // extract\n  // generate random coords for new value\n  const coords = getNewRandomCoords(arr);\n\n  if (coords) {\n    // paste new value into coords\n    arr[coords[0]][coords[1]] = getRandomlyTwoOrFour();\n  }\n}\n\nfunction renderScore(scoreValue) {\n  gameScore.textContent = scoreValue;\n}\n\nfunction getInitialNumbers(count) {\n  const initialNumbersArr = [];\n\n  while (initialNumbersArr.length < count) {\n    initialNumbersArr.push(getRandomlyTwoOrFour());\n  }\n\n  return initialNumbersArr;\n}\n\nfunction getRandomlyTwoOrFour() {\n  return Math.random() < 0.9 ? 2 : 4;\n}\n\nfunction getRandomStartCoords(max, elements) {\n  const randomCoords = [];\n\n  while (randomCoords.length < elements) {\n    const coord = {\n      row: getRandomDigit(max),\n      col: getRandomDigit(max),\n    };\n\n    if (\n      !randomCoords.some(\n        ({ row, col }) => row === coord.row && col === coord.col\n      )\n    ) {\n      randomCoords.push(coord);\n    }\n  }\n\n  return randomCoords;\n}\n\nfunction flipArray(arr) {\n  const turnedArray = Array.from({\n    length: arr.length,\n  }).map(() => []);\n\n  for (const i in arr) {\n    for (const j in arr[i]) {\n      turnedArray[i].push(arr[j][i]);\n    }\n  }\n\n  return turnedArray;\n}\n\nfunction getRandomDigit(max) {\n  // the maximum is NOT inclusive\n  return Math.floor(Math.random() * max);\n}\n\nfunction resetGame() {\n  setScore(0);\n\n  gameFieldArray = [\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n  ];\n\n  page.addEventListener(keyDownEvent, turn);\n}\n"]}